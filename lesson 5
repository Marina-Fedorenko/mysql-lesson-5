Пусть в таблице users поля created_at и updated_at оказались незаполненными. Заполните их текущими датой и временем.

mysql> CREATE TABLE users (
    -> id SERIAL PRIMARY KEY,
    -> name VARCHAR(50),
    -> created_at DATETIME,
    -> updated_at DATETIME);
Query OK, 0 rows affected (0.15 sec)
 SELECT * FROM users;
Empty set (0.00 sec)
mysql> INSERT INTO users (name, created_at, updated_at) VALUES
    -> ('Anna', NOW(), NOW()),
    -> ('Mike', NOW(), NOW()),
    -> ('Jack', NOW(), NOW());
Query OK, 3 rows affected (0.01 sec)
Records: 3  Duplicates: 0  Warnings: 0
mysql> SELECT * FROM users;
+----+------+---------------------+---------------------+
| id | name | created_at          | updated_at          |
+----+------+---------------------+---------------------+
|  1 | Anna | 2021-01-11 14:16:02 | 2021-01-11 14:16:02 |
|  2 | Mike | 2021-01-11 14:16:02 | 2021-01-11 14:16:02 |
|  3 | Jack | 2021-01-11 14:16:02 | 2021-01-11 14:16:02 |
+----+------+---------------------+---------------------+
3 rows in set (0.00 sec)

Таблица users была неудачно спроектирована. 
Записи created_at и updated_at были заданы типом VARCHAR и в них долгое время помещались значения в формате 20.10.2017 8:10. 
Необходимо преобразовать поля к типу DATETIME, сохранив введённые ранее значения.
mysql>  create TABLE users (
    -> id SERIAL PRIMARY KEY,
    -> name VARCHAR(50),
    -> created_at VARCHAR(50),
    -> updated_at VARCHAR(50));
Query OK, 0 rows affected (0.09 sec)

mysql> INSERT INTO users (name, created_at, updated_at) VALUES
    -> ('Anna', '20.10.2017 8:10', '20.10.2017 8:10');
Query OK, 1 row affected (0.01 sec)

mysql> SELECT * FROM users;
+----+------+-----------------+-----------------+
| id | name | created_at      | updated_at      |
+----+------+-----------------+-----------------+
|  1 | Anna | 20.10.2017 8:10 | 20.10.2017 8:10 |
+----+------+-----------------+-----------------+
1 row in set (0.00 sec)
mysql> UPDATE users SET created_at = STR_TO_DATE ('20.10.2017 8:10', '%d.%m.%Y %H:%i');
Query OK, 1 row affected (0.01 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql> UPDATE users SET updated_at = STR_TO_DATE ('20.10.2017 8:10', '%d.%m.%Y %H:%i');
Query OK, 1 row affected (0.01 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql> SELECT * FROM users;
+----+------+---------------------+---------------------+
| id | name | created_at          | updated_at          |
+----+------+---------------------+---------------------+
|  1 | Anna | 2017-10-20 08:10:00 | 2017-10-20 08:10:00 |
+----+------+---------------------+---------------------+
1 row in set (0.00 sec)

В таблице складских запасов storehouses_products в поле value могут встречаться самые разные цифры: 0, если товар закончился и выше нуля, если на складе имеются запасы. 
Необходимо отсортировать записи таким образом, чтобы они выводились в порядке увеличения значения value. 
Однако нулевые запасы должны выводиться в конце, после всех записей.

mysql> CREATE TABLE storehouses_products (
    -> id SERIAL PRIMARY KEY,
    -> name VARCHAR(50),
    -> value INT);
Query OK, 0 rows affected (0.10 sec)

mysql> INSERT INTO storehouses_products (name, value) VALUES
    -> ('book', 0),
    -> ('pen', 2500),
    -> ('paint', 0),
    -> ('brush', 30),
    -> ('rubber', 50);
Query OK, 5 rows affected (0.01 sec)
Records: 5  Duplicates: 0  Warnings: 0

mysql> SELECT * FROM storehouses_products;
+----+--------+-------+
| id | name   | value |
+----+--------+-------+
|  1 | book   |     0 |
|  2 | pen    |  2500 |
|  3 | paint  |     0 |
|  4 | brush  |    30 |
|  5 | rubber |    50 |
+----+--------+-------+
5 rows in set (0.00 sec)
mysql> SELECT * FROM storehouses_products ORDER BY
    -> value = 0,
    -> value ASC;
+----+--------+-------+
| id | name   | value |
+----+--------+-------+
|  4 | brush  |    30 |
|  5 | rubber |    50 |
|  2 | pen    |  2500 |
|  1 | book   |     0 |
|  3 | paint  |     0 |
+----+--------+-------+
5 rows in set (0.00 sec)

Практическое задание теме «Агрегация данных»
Подсчитайте средний возраст пользователей в таблице users.
ALTER TABLE users ADD COLUMN birthday DATE NOT NULL AFTER name;
Query OK, 0 rows affected (0.11 sec)
Records: 0  Duplicates: 0  Warnings: 0
mysql> INSERT INTO users (name, birthday, created_at, updated_at) VALUES
    -> ('John', '1985-01-12', NOW(), NOW()
    ('Mike', '2002-03-29', NOW(), NOW()
    ('Phil', '1997-10-13', NOW(), NOW());
Query OK, 3 rows affected (0.01 sec));
SELECT * FROM users;
+----+------+------------+---------------------+---------------------+
| id | name | birthday   | created_at          | updated_at          |
+----+------+------------+---------------------+---------------------+
|  5 | John | 1985-01-12 | 2021-01-11 15:58:32 | 2021-01-11 15:58:32 |
|  6 | Mike | 2002-03-29 | 2021-01-11 16:01:22 | 2021-01-11 16:01:22 |
|  7 | Phil | 1997-10-13 | 2021-01-11 16:01:35 | 2021-01-11 16:01:35 |
+----+------+------------+---------------------+---------------------+
3 rows in set (0.00 sec)
Query OK, 1 row affected (0.01 sec)
mysql> SELECT
    -> name
    -> ,
    -> (TO_DAYS(NOW()) - TO_DAYS(birthday)) / 365.25 AS age
    -> FROM
    -> users;
+------+---------+
| name | age     |
+------+---------+
| John | 35.9973 |
| Mike | 18.7899 |
| Phil | 23.2471 |
+------+---------+
3 rows in set (0.00 sec)

mysql> SELECT
    -> name,
    -> FLOOR((TO_DAYS(NOW()) - TO_DAYS(birthday)) / 365.25) AS age
    -> FROM
    -> users;
+------+------+
| name | age  |
+------+------+
| John |   35 |
| Mike |   18 |
| Phil |   23 |
+------+------+
3 rows in set (0.00 sec)
mysql> SELECT AVG(age) FROM users;
ERROR 1054 (42S22): Unknown column 'age' in 'field list' ** вот тут выдает ошибку, я понимаю, в чем суть, но не понимаю, как дальше сделать. 
добавить новую колонку и туда записать данные, кажется, не тем вариантом, который нужен. Поэтому у меня получилось посчитать только среднее годлов их рождения.
mysql> SELECT AVG(birthday) FROM users;
+---------------+
| AVG(birthday) |
+---------------+
| 19947151.3333 |
+---------------+
1 row in set (0.00 sec)
